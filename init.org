#+PROPERTY: header-args :comments yes :results silent

* Early Init 配置
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-

;; 优化垃圾回收，加快启动速度
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; 禁用 package.el 自动加载
(setq package-enable-at-startup nil)
(setq package-quickstart nil)

;; 禁用菜单栏、工具栏、滚动条
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; 禁用启动画面和文件对话框
(setq inhibit-splash-screen t
      use-file-dialog nil)

;; 禁止自动缩放窗口
(setq frame-inhibit-implied-resize t)

;; Emacs 28+：禁止延迟编译
(when (boundp 'comp-deferred-compilation)
  (setq comp-deferred-compilation nil))

;; 启动后恢复正常垃圾回收阈值
(let ((normal-gc-cons-threshold (* 20 1024 1024)))
  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))

(provide 'early-init)
;;; early-init.el ends here
#+end_src

* 基础配置
#+begin_src emacs-lisp :tangle lisp/init-basic.el
  ;; 基础设置
  (setq inhibit-splash-screen t)
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; 编码设置
  (prefer-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)

  ;; 设置 M-p 为 execute-extended-command
  (global-set-key (kbd "M-p") 'execute-extended-command)

  (provide 'init-basic)
#+end_src

* 包管理配置
#+begin_src emacs-lisp :tangle lisp/init-package.el
  (require 'package)
  (setq package-archives
        '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("org"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))
  (package-initialize)

  ;; Ensure package contents are loaded
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Ensure `use-package`, `evil`, and `markdown-mode` are installed
  (dolist (pkg '(use-package evil markdown-mode))
    (unless (package-installed-p pkg)
      (package-install pkg)))

  (provide 'init-package)
#+end_src

* Evil 配置
#+begin_src emacs-lisp :tangle lisp/init-evil.el
  (require 'evil)
  (evil-mode 1)

  ;; 检查 fcitx5-remote 是否可用
  (defun check-fcitx5-remote ()
    (executable-find "fcitx5-remote"))

  ;; 切换到英文输入法
  (defun switch-to-english-input ()
    (when (check-fcitx5-remote)
      (call-process "fcitx5-remote" nil nil nil "-c")))

  ;; 在进入普通模式时切换到英文输入法
  (add-hook 'evil-normal-state-entry-hook 'switch-to-english-input)

  (provide 'init-evil)
#+end_src

* UI 配置
#+begin_src emacs-lisp :tangle lisp/init-ui.el
  ;; Enable pixel scroll
  (pixel-scroll-precision-mode 1)
  
  ;; Enable smooth scrolling
  (setq pixel-scroll-precision-interpolate-page t)
  
  ;; Use pixel scroll for all scrolling commands
  (defalias 'scroll-up-command 'pixel-scroll-interpolate-down)
  (defalias 'scroll-down-command 'pixel-scroll-interpolate-up)
  
  ;; Additional scroll settings for better experience
  (setq scroll-conservatively 101)  ;; Don't recenter point
  (setq scroll-margin 0)            ;; No margin when scrolling
  (setq scroll-preserve-screen-position t)  ;; Keep cursor position relative to screen
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))  ;; Fine-tune mouse wheel scrolling
  (setq mouse-wheel-progressive-speed nil)  ;; Disable progressive speed

  ;; Enable relative line numbers for non-org and non-markdown files
  (defun enable-relative-line-numbers ()
    (unless (or (derived-mode-p 'org-mode)
                (derived-mode-p 'markdown-mode)
                (derived-mode-p 'gfm-mode))
      (display-line-numbers-mode 1)
      (setq display-line-numbers-type 'relative)))

  ;; Add hook to enable relative line numbers
  (add-hook 'prog-mode-hook 'enable-relative-line-numbers)
  (add-hook 'text-mode-hook 'enable-relative-line-numbers)

  (provide 'init-ui)
#+end_src

* 字体配置
#+begin_src emacs-lisp :tangle lisp/init-font.el
  ;; 设置默认字体族和大小
  (set-face-attribute 'default nil
                    :font "Maple Mono NF CN"
                    :height 130)

  ;; 确保 fixed-pitch face 也使用 Maple Mono NF CN
  (set-face-attribute 'fixed-pitch nil
                    :font "Maple Mono NF CN"
                    :height (face-attribute 'default :height))

  ;; 为 CJK 字符设置字体
  (set-fontset-font t 'han (font-spec :family "Maple Mono NF CN" 
                                    :height (face-attribute 'default :height)))

  ;; 确保所有等宽文本使用相同字体
  (set-face-attribute 'fixed-pitch-serif nil
                    :font "Maple Mono NF CN"
                    :height (face-attribute 'default :height))

  (provide 'init-font)
#+end_src

* Markdown 配置
#+begin_src emacs-lisp :tangle lisp/init-markdown.el
  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . gfm-mode))
    :init
    (setq markdown-command "multimarkdown"))

  (provide 'init-markdown)
#+end_src

* Org 配置
#+begin_src emacs-lisp :tangle lisp/init-org.el
  (require 'org-tempo)

  ;; 配置 Org table 字体
  (set-face-attribute 'org-table nil
                    :font "Maple Mono NF CN"
                    :height (face-attribute 'default :height))

  ;; Org mode 表格对齐设置
  (setq org-table-align-indent t)
  (setq org-table-align-char ?\s)

  ;; 确保 Org 表格中的字体大小正确
  (add-hook 'org-mode-hook
            (lambda ()
              (set-face-attribute 'org-table nil
                                :font "Maple Mono NF CN"
                                :height (face-attribute 'default :height))))

  (provide 'init-org)
#+end_src

* 主入口
#+begin_src emacs-lisp :tangle init.el
  ;; 添加 lisp 目录到 load-path
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  ;; 加载各个模块
  (require 'init-basic)
  (require 'init-package)
  (require 'init-evil)
  (require 'init-ui)
  (require 'init-font)
  (require 'init-markdown)
  (require 'init-org)
#+end_src

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
