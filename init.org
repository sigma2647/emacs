#+PROPERTY: header-args :comments yes :results silent

* Early Init 配置
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-

;; 定义正常垃圾回收阈值
(defvar normal-gc-cons-threshold (* 20 1024 1024))

;; 优化垃圾回收，加快启动速度
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; 禁用 package.el 自动加载
(setq package-enable-at-startup nil)
(setq package-quickstart nil)

;; 禁用菜单栏、工具栏、滚动条
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; 禁用启动画面和文件对话框
(setq inhibit-splash-screen t
      use-file-dialog nil)

;; 禁止自动缩放窗口
(setq frame-inhibit-implied-resize t)

;; Emacs 28+：禁止延迟编译
(when (boundp 'comp-deferred-compilation)
  (setq comp-deferred-compilation nil))

;; 启动后恢复正常垃圾回收阈值
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold normal-gc-cons-threshold)))

(provide 'early-init)
;;; early-init.el ends here
#+end_src

* 基础配置
#+begin_src emacs-lisp :tangle lisp/init-basic.el
  ;; 基础设置
  (setq inhibit-splash-screen t)
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; 编码设置
  (prefer-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)

  ;; 设置 M-p 为 execute-extended-command
  (global-set-key (kbd "M-p") 'execute-extended-command)

  ;; 自动更新文件
  (setq auto-revert-interval 1)  ;; 每秒检查一次
  (setq auto-revert-check-vc-info t)  ;; 检查版本控制信息
  (setq auto-revert-verbose nil)  ;; 不显示提示信息
  (setq auto-revert-use-notify t)  ;; 使用文件系统通知
  (setq auto-revert-stop-on-user-input nil)  ;; 用户输入时继续更新
  (setq auto-revert-remote-files t)  ;; 支持远程文件
  (global-auto-revert-mode 1)  ;; 全局启用

  ;; 优化文件监控
  (when (and (fboundp 'file-notify-add-watch)
             (executable-find "inotifywait"))
    (setq auto-revert-notify-exclude-dir-regexp
          (concat "\\`" (regexp-opt '("/tmp" "/var/tmp" "/dev" "/sys" "/proc")) "\\'")))

  (provide 'init-basic)
#+end_src

* 包管理配置
#+begin_src emacs-lisp :tangle lisp/init-package.el
  (require 'package)
  (setq package-archives
        '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("org"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))
  (package-initialize)

  ;; Ensure package contents are loaded
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Ensure `use-package`, `evil`, `markdown-mode`, `vertico`, and `orderless` are installed
  (dolist (pkg '(use-package evil markdown-mode vertico orderless))
    (unless (package-installed-p pkg)
      (package-install pkg)))

  (provide 'init-package)
#+end_src

* Evil 配置
#+begin_src emacs-lisp :tangle lisp/init-evil.el
  (require 'evil)
  (evil-mode 1)

  ;; 检查 fcitx5-remote 是否可用
  (defun check-fcitx5-remote ()
    (executable-find "fcitx5-remote"))

  ;; 切换到英文输入法
  (defun switch-to-english-input ()
    (when (check-fcitx5-remote)
      (call-process "fcitx5-remote" nil nil nil "-c")))

  ;; 在进入普通模式时切换到英文输入法
  (add-hook 'evil-normal-state-entry-hook 'switch-to-english-input)

  ;; 自定义键位映射
  (evil-define-key 'normal 'global
    "H" 'evil-first-non-blank  ;; 移动到行首非空白字符
    "L" 'evil-end-of-line)     ;; 移动到行尾

  (evil-define-key 'visual 'global
    "H" 'evil-first-non-blank  ;; 移动到行首非空白字符
    "L" 'evil-end-of-line)     ;; 移动到行尾

  ;; 可选：添加更多常用键位映射
  (evil-define-key 'normal 'global
    "gh" 'evil-window-top      ;; 移动到窗口顶部
    "gl" 'evil-window-bottom   ;; 移动到窗口底部
    "gj" 'evil-next-line       ;; 向下移动一行
    "gk" 'evil-previous-line)  ;; 向上移动一行

  (provide 'init-evil)
#+end_src

* UI 配置
#+begin_src emacs-lisp :tangle lisp/init-ui.el
  ;; Enable pixel scroll
  (pixel-scroll-precision-mode 1)
  
  ;; Enable smooth scrolling
  (setq pixel-scroll-precision-interpolate-page t)
  
  ;; Use pixel scroll for all scrolling commands
  (defalias 'scroll-up-command 'pixel-scroll-interpolate-down)
  (defalias 'scroll-down-command 'pixel-scroll-interpolate-up)
  
  ;; Additional scroll settings for better experience
  (setq scroll-conservatively 101)  ;; Don't recenter point
  (setq scroll-margin 0)            ;; No margin when scrolling
  (setq scroll-preserve-screen-position t)  ;; Keep cursor position relative to screen
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))  ;; Fine-tune mouse wheel scrolling
  (setq mouse-wheel-progressive-speed nil)  ;; Disable progressive speed

  ;; Enable relative line numbers for non-org and non-markdown files
  (defun enable-relative-line-numbers ()
    (unless (or (derived-mode-p 'org-mode)
                (derived-mode-p 'markdown-mode)
                (derived-mode-p 'gfm-mode))
      (display-line-numbers-mode 1)
      (setq display-line-numbers-type 'relative)))

  ;; Add hook to enable relative line numbers
  (add-hook 'prog-mode-hook 'enable-relative-line-numbers)
  (add-hook 'text-mode-hook 'enable-relative-line-numbers)

  ;; 配置 doom-modeline
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 25)                ;; 设置高度
  (doom-modeline-bar-width 3)              ;; 设置指示条宽度
  (doom-modeline-icon t)                   ;; 显示图标
  (doom-modeline-major-mode-icon t)        ;; 显示主模式图标
  (doom-modeline-buffer-encoding t)        ;; 显示编码
  (doom-modeline-indent-info t)            ;; 显示缩进信息
  (doom-modeline-lsp t)                    ;; 显示 LSP 状态
  (doom-modeline-time t)                   ;; 显示时间
  (doom-modeline-time-24hr t))             ;; 使用24小时制

  (provide 'init-ui)
#+end_src

* 字体配置
#+begin_src emacs-lisp :tangle lisp/init-font.el
  ;; 设置默认字体族和大小
  (set-face-attribute 'default nil
                    :font "Maple Mono NF CN"
                    :height 130)

  ;; 确保 fixed-pitch face 也使用 Maple Mono NF CN
  (set-face-attribute 'fixed-pitch nil
                    :font "Maple Mono NF CN"
                    :height (face-attribute 'default :height))

  ;; 为 CJK 字符设置字体
  (set-fontset-font t 'han (font-spec :family "Maple Mono NF CN" 
                                    :height (face-attribute 'default :height)))

  ;; 确保所有等宽文本使用相同字体
  (set-face-attribute 'fixed-pitch-serif nil
                    :font "Maple Mono NF CN"
                    :height (face-attribute 'default :height))

  (provide 'init-font)
#+end_src

* Markdown 配置
#+begin_src emacs-lisp :tangle lisp/init-markdown.el
  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . gfm-mode))
    :init
    (setq markdown-command "multimarkdown"))

  (provide 'init-markdown)
#+end_src

* Org 配置
#+begin_src emacs-lisp :tangle lisp/init-org.el
  (require 'org-tempo)

  ;; 配置 Org table 字体
  (set-face-attribute 'org-table nil
                     :font "Maple Mono NF CN"
                     :height (face-attribute 'default :height))

  ;; Org mode 表格对齐设置
  (setq org-table-align-indent t)
  (setq org-table-align-char ?\s)

  ;; 确保 Org 表格中的字体大小正确
  (add-hook 'org-mode-hook
            (lambda ()
              (set-face-attribute 'org-table nil
                                :font "Maple Mono NF CN"
                                :height (face-attribute 'default :height))))
                                
  ;; 设置标题样式
  (custom-set-faces
   '(org-document-title ((t (:height 1.75 :weight bold))))
   '(org-level-1 ((t (:height 1.5 :weight bold))))
   '(org-level-2 ((t (:height 1.25 :weight bold))))
   '(org-level-3 ((t (:height 1.1 :weight bold))))
   '(org-level-4 ((t (:height 1.0 :weight bold))))
   '(org-level-5 ((t (:height 1.0 :weight bold))))
   '(org-level-6 ((t (:height 1.0 :weight bold))))
   '(org-level-7 ((t (:height 1.0 :weight bold))))
   '(org-level-8 ((t (:height 1.0 :weight bold)))))

  ;; 使用 org-modern 美化界面
  (use-package org-modern
    :ensure t
    :hook (org-mode . org-modern-mode)
    :config
    (setq org-modern-star '("★" "☆" "◆" "◇" "▶" "▷" "✿" "❀"))
    (setq org-modern-list '((?- . "•") (?+ . "◦") (?* . "▹")))
    (setq org-modern-table t)
    (setq org-modern-block-name
          '((t . t)
            ("src" "»" "«")
            ("example" "»–" "–«")
            ("quote" "❝" "❞"))))

  ;; 使用 org-appear 显示强调标记
  (use-package org-appear
    :ensure t
    :hook (org-mode . org-appear-mode)
    :config
    (setq org-appear-autolinks t
          org-appear-autosubmarkers t
          org-appear-autoentities t
          org-appear-autokeywords t
          org-appear-inside-latex t))

  ;; 使用 prettify-symbols-mode 替换特殊标记
  (defun my/org-prettify-symbols ()
    (setq prettify-symbols-alist
          '(("#+TITLE:" . "📘")
            ("#+AUTHOR:" . "👤")
            ("#+DATE:" . "📅")
            ("#+EMAIL:" . "📧")
            ("#+OPTIONS:" . "⚙")
            ("#+BEGIN_SRC" . "🖥")
            ("#+END_SRC" . "🖥")
            ("#+BEGIN_QUOTE" . "❝")
            ("#+END_QUOTE" . "❞")
            ("#+RESULTS:" . "📊")))
    (prettify-symbols-mode 1))
  (add-hook 'org-mode-hook 'my/org-prettify-symbols)

  ;; 使用 olivetti 居中显示内容
  (use-package olivetti
    :ensure t
    :hook (org-mode . olivetti-mode)
    :config
    (setq olivetti-body-width 0.618))

  ;; 设置其他 Org-mode 选项
  (setq org-hide-emphasis-markers t
        org-startup-indented t
        org-ellipsis " ▼ "
        org-pretty-entities t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-hide-leading-stars t
        org-startup-with-inline-images t
        org-image-actual-width '(300)
        org-adapt-indentation nil)

  (provide 'init-org)
#+end_src

* 主题配置
#+begin_src emacs-lisp :tangle lisp/init-theme.el
  ;; 安装doom-themes和所有图标
  (use-package doom-themes
    :ensure t
    :config
    ;; 全局设置
    (setq doom-themes-enable-bold t    ; 如果nil，粗体将被禁用
          doom-themes-enable-italic t) ; 如果nil，斜体将被禁用
    
    ;; 加载Nord主题（冷色系）
    (load-theme 'doom-nord t)
    
    ;; 启用闪亮的代码块
    (doom-themes-org-config)
    
    ;; 改进代码块边框和背景
    (custom-set-faces
     '(org-block-begin-line ((t (:foreground "#5B6268" :background "#2d333b" :extend t :italic t :height 0.9))))
     '(org-block ((t (:background "#21242b" :extend t))))
     '(org-block-end-line ((t (:foreground "#5B6268" :background "#2d333b" :extend t :italic t :height 0.9))))))
  
  ;; 代码块美化设置
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-responsive 'top
          highlight-indent-guides-delay 0
          highlight-indent-guides-auto-character-face-perc 30))
  
  ;; 彩虹分隔符
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
  
  ;; 代码块美化
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  
  ;; 为org-modern和olivetti模式提供更好的主题集成
  (with-eval-after-load 'org-modern
    (custom-set-faces
     '(org-modern-label ((t (:height 0.9 :box (:line-width -1 :color "#81a1c1") :foreground "#81a1c1" :background "#2e3440"))))
     '(org-modern-tag ((t (:foreground "#5e81ac" :background "#2e3440" :box (:line-width -1 :color "#4c566a")))))))
  
  ;; 提供自定义的modeline配置
  (with-eval-after-load 'doom-modeline
    (custom-set-faces
     '(mode-line ((t (:background "#3b4252" :foreground "#eceff4"))))
     '(mode-line-inactive ((t (:background "#2e3440" :foreground "#4c566a"))))))
  
  ;; 源代码块语法高亮
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-edit-src-content-indentation 0)
        
  ;; 美化内联代码
  (defface org-inline-code-face
    '((t :inherit (shadow fixed-pitch)
         :foreground "#88c0d0"
         :background "#2e3440"
         :box (:line-width -1 :color "#4c566a")))
    "Face for inline code in Org mode.")
  
  (defun my/org-prettify-inline-code ()
    "Make inline code more visible in Org mode."
    (font-lock-add-keywords
     nil
     '(("\\(\\\\begin{[a-zA-Z0-9]+}\\)" 1 'org-block-begin-line prepend)
       ("\\(\\\\end{[a-zA-Z0-9]+}\\)" 1 'org-block-end-line prepend)
       ("\\(~\\)\\([^~]+\\)\\(~\\)" (0 'org-inline-code-face t)))))
  
  (add-hook 'org-mode-hook 'my/org-prettify-inline-code)
  
  ;; 全局启用行号但在特定模式禁用
  (global-display-line-numbers-mode 1)
  (dolist (mode '(org-mode vterm-mode eshell-mode shell-mode term-mode dashboard-mode))
    (add-hook (intern (format "%s-hook" mode)) 
              (lambda () (display-line-numbers-mode 0))))
  
  (provide 'init-theme)
#+end_src

* 启动配置
#+begin_src emacs-lisp :tangle lisp/init-startup.el
;;; init-startup.el --- Initialize startup configurations -*- lexical-binding: t -*-

;; ┌─────────┐
;; │ setting │
;; └─────────┘

;; 设置 logo
(defcustom centaur-logo (expand-file-name
                        (if (display-graphic-p) "~/.emacs.d/dashboard/eva.png" "~/.emacs.d/dashboard/banner.txt")
                        user-emacs-directory)
  "Set Centaur logo. nil means official logo."
  :group 'centaur
  :type 'string)

;; 设置启动缓冲区
(defun my/startup-buffer ()
  "Return the buffer to show at startup."
  (let ((file (car (cdr command-line-args))))  ;; 获取第一个非选项参数
    (if (and file (file-exists-p file))
        (find-file file)
      (when (and (not (daemonp))
                (not (get-buffer "*dashboard*")))
        (get-buffer-create "*dashboard*")))))

;; 设置启动行为
(setq initial-buffer-choice #'my/startup-buffer)

;; 处理命令行参数
(add-hook 'after-init-hook
          (lambda ()
            (when (and (not (daemonp))
                      (not (get-buffer "*dashboard*"))
                      (not (cdr command-line-args)))  ;; 只有在没有命令行参数时才显示 dashboard
              (dashboard-refresh-buffer))))

(provide 'init-startup)
#+end_src

* Dashboard 配置
#+begin_src emacs-lisp :tangle lisp/init-dashboard.el
;;; init-dashboard.el --- Initialize dashboard configurations -*- lexical-binding: t -*-

;; 确保 all-the-icons 已安装并正确加载
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package dashboard
  :ensure t
  :init
  ;; 基本设置
  (setq dashboard-startup-banner (or centaur-logo 'official))  ;; 保留自定义 logo
  (setq dashboard-banner-logo-title "Welcome to Emacs")  ;; 欢迎信息
  
  ;; 关键居中设置
  (setq dashboard-center-content t)     ;; 水平居中显示内容
  (setq dashboard-vertically-center-content t)  ;; 垂直居中内容
  (setq dashboard-items-default-length 5)  ;; 每个部分显示的条目数
  
  ;; 内容显示设置
  (setq dashboard-set-heading-icons t)  ;; 显示标题图标
  (setq dashboard-set-file-icons t)     ;; 显示文件图标
  (setq dashboard-image-banner-max-width 300)  ;; 图片最大宽度
  (setq dashboard-image-banner-max-height 300) ;; 图片最大高度
  (setq dashboard-items '((recents  . 5)    ;; 最近文件数量
                          ;; (projects . 5)  ;; 项目数量 - 已移除因为需要projectile
                          (bookmarks . 5)   ;; 书签数量
                          (agenda . 5)      ;; 日程数量
                          (registers . 5))) ;; 寄存器数量
  
  ;; 样式设置
  (setq dashboard-set-navigator nil)      ;; 不显示导航器
  (setq dashboard-set-init-info t)      ;; 显示初始化信息
  (setq dashboard-set-footer t)         ;; 显示页脚
  (setq dashboard-footer-messages '("Welcome to Emacs!"))  ;; 自定义页脚消息
  
  ;; 最关键的标题格式设置
  (setq dashboard-item-names '(("Recent Files:" . "Recent Files:")  ;; 保持英文一致性
                               ("Bookmarks:" . "Bookmarks:")
                               ("Agenda for today:" . "Agenda for today:")
                               ("Registers:" . "Registers:")))
  :config
  ;; 图标设置 - 放在:config部分确保all-the-icons已加载
  (when (display-graphic-p)
    (setq dashboard-footer-icon (all-the-icons-octicon "dashboard"
                                                     :height 1.1
                                                     :v-adjust -0.05
                                                     :face 'font-lock-keyword-face)))
  (dashboard-setup-startup-hook))

;; 优化 dashboard 样式和性能
(with-eval-after-load 'dashboard
  ;; 基本优化设置
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator nil)
  
  ;; 缓存设置
  (setq dashboard-cache-file (expand-file-name "dashboard-cache.el" user-emacs-directory))
  (setq dashboard-cache-prefetch t))

(provide 'init-dashboard)
#+end_src

* 补全系统配置
#+begin_src emacs-lisp :tangle lisp/init-completion.el
;;; init-completion.el --- Initialize completion configurations -*- lexical-binding: t -*-

;; 启用 vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t)  ;; 循环选择
  (vertico-resize t) ;; 自动调整大小
  (vertico-count 10) ;; 显示10个候选项
  (vertico-scroll-margin 0)) ;; 滚动边距

;; 启用 orderless 补全风格
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles basic-remote orderless)))))

;; 配置 M-x 命令补全
(defun my/vertico-command-completion ()
  "Configure command completion for M-x."
  (setq-local vertico-sort-function nil)  ;; 禁用排序
  (setq-local vertico-group-format #'vertico-group-format)  ;; 启用分组
  (setq-local vertico-count-format #'vertico-count-format))  ;; 启用计数

(add-hook 'vertico-mode-hook #'my/vertico-command-completion)

;; 配置 M-x 命令历史
(use-package savehist
  :ensure t
  :init
  (savehist-mode)
  :custom
  (savehist-additional-variables '(extended-command-history)))

;; 配置命令建议
(use-package marginalia
  :ensure t
  :init
  (marginalia-mode)
  :custom
  (marginalia-align 'right)
  (marginalia-annotators '(marginalia-annotators-heavy)))

;; 配置命令提示
(use-package consult
  :ensure t
  :custom
  (consult-preview-key nil)  ;; 禁用预览
  (consult-narrow-key "<")   ;; 设置窄化键
  (consult-widen-key ">"))   ;; 设置扩展键

(provide 'init-completion)
#+end_src

* 主入口
#+begin_src emacs-lisp :tangle init.el
  ;; 添加 lisp 目录到 load-path
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  ;; 加载各个模块
  (require 'init-basic)
  (require 'init-package)
  (require 'init-evil)
  (require 'init-ui)
  (require 'init-font)
  (require 'init-markdown)
  (require 'init-org)
  (require 'init-startup)
  (require 'init-dashboard)
  (require 'init-completion)  ;; 添加补全系统配置
  (require 'init-theme)      ;; 添加主题配置

  ;; 确保必要的包已安装
  (use-package visual-fill-column :ensure t)
  
  ;; 解决org文件本地变量安全提示问题
  ;; 方法1：使用safe-local-eval-forms
  (add-to-list 'safe-local-eval-forms
               '(add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t))

  ;; 方法2：备用方案 - 使用safe-local-variable
  (put 'eval 'safe-local-variable
       (lambda (x)
         (and (functionp x)
              (string-match-p "org-babel-tangle" (prin1-to-string x)))))
#+end_src

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
